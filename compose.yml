services:

  mongo:
    image: mongo:4.4
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: not-so-secret
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./db/0000__baseline.js:/docker-entrypoint-initdb.d/0000_baseline.js

  redis:
    image: redis:7.2
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  categories:
    build:
      context: .
      dockerfile: ./src/serviceRunner/Dockerfile
      args:
        - SERVICE_PATH=src/services/categories
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SERVICE_NAME: Categories
      DB_CONNECTION_STRING: mongodb://root:not-so-secret@mongo:27017/reviews-poc-db?ssl=false&authSource=admin
      REDIS_CONNECTION_STRING: redis://redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/.well-known/apollo/server-health"]
      interval: 5s
      timeout: 5s
      retries: 5

  products:
    build:
      context: .
      dockerfile: ./src/serviceRunner/Dockerfile
      args:
        - SERVICE_PATH=src/services/products
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SERVICE_NAME: Products
      DB_CONNECTION_STRING: mongodb://root:not-so-secret@mongo:27017/reviews-poc-db?ssl=false&authSource=admin
      REDIS_CONNECTION_STRING: redis://redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/.well-known/apollo/server-health"]
      interval: 5s
      timeout: 5s
      retries: 5

  reviews:
    build:
      context: .
      dockerfile: ./src/serviceRunner/Dockerfile
      args:
        - SERVICE_PATH=src/services/reviews
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SERVICE_NAME: Reviews
      DB_CONNECTION_STRING: mongodb://root:not-so-secret@mongo:27017/reviews-poc-db?ssl=false&authSource=admin
      REDIS_CONNECTION_STRING: redis://redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/.well-known/apollo/server-health"]
      interval: 5s
      timeout: 5s
      retries: 5

  stock:
    build:
      context: .
      dockerfile: ./src/serviceRunner/Dockerfile
      args:
        - SERVICE_PATH=src/services/stock
    depends_on:
      - mongo
      - redis
    environment:
      SERVICE_NAME: Stock
      DB_CONNECTION_STRING: mongodb://root:not-so-secret@mongo:27017/reviews-poc-db?ssl=false&authSource=admin
      REDIS_CONNECTION_STRING: redis://redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/.well-known/apollo/server-health"]
      interval: 5s
      timeout: 5s
      retries: 5

  tags:
    build:
      context: .
      dockerfile: ./src/serviceRunner/Dockerfile
      args:
        - SERVICE_PATH=src/services/tags
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SERVICE_NAME: Tags
      DB_CONNECTION_STRING: mongodb://root:not-so-secret@mongo:27017/reviews-poc-db?ssl=false&authSource=admin
      REDIS_CONNECTION_STRING: redis://redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/.well-known/apollo/server-health"]
      interval: 5s
      timeout: 5s
      retries: 5

  users:
    build:
      context: .
      dockerfile: ./src/serviceRunner/Dockerfile
      args:
        - SERVICE_PATH=src/services/users
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SERVICE_NAME: Users
      DB_CONNECTION_STRING: mongodb://root:not-so-secret@mongo:27017/reviews-poc-db?ssl=false&authSource=admin
      REDIS_CONNECTION_STRING: redis://redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/.well-known/apollo/server-health"]
      interval: 5s
      timeout: 5s
      retries: 5

  gateway:
    build:
      context: ./src/gateway
      dockerfile: ./Dockerfile
    ports:
      - 4000:4000
    depends_on:
      categories:
        condition: service_healthy
      products:
        condition: service_healthy
      reviews:
        condition: service_healthy
      stock:
        condition: service_healthy
      tags:
        condition: service_healthy
      users:
        condition: service_healthy
    environment:
      PORT: 4000
      CATEGORIES_URL: http://categories/graphql
      PRODUCTS_URL: http://products/graphql
      REVIEWS_URL: http://reviews/graphql
      STOCK_URL: http://stock/graphql
      TAGS_URL: http://tags/graphql
      USERS_URL: http://users/graphql
